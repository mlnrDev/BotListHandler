plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

repositories {
    mavenCentral()
}

// the rest is from https://github.com/botblock/JavaBotBlockAPI/blob/master/build.gradle

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: 'signing'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = 'dev.mlnr'

    repositories {
        mavenCentral()
    }

    ext {
        dependencies {
            implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

            artifactId = (rootProject == project ? project.name : "$rootProject.name-$project.name")
            moduleName = "${group}.blh${rootProject == project ? "" : ".${project.name}"}"
        }

        configureJar = { Object jarConfig, String classifier = '' ->
            jarConfig.baseName = "$project.artifactId"
            jarConfig.classifier = classifier
            jarConfig.extension = 'jar'

            jarConfig.manifest {
                it.attributes(
                        'Implementation-Title': project.artifactId,
                        'Implementation-Version': project.version,
                        'Automatic-Module-Name': "${project.moduleName}"
                )
            }
        }

        configureJavadoc = { Object jDocConfig ->
            jDocConfig.options {
                it.author()
                it.encoding = 'UTF-8'
                it.memberLevel = JavadocMemberLevel.PUBLIC

                if (it instanceof StandardJavadocDocletOptions) {
                    def opt = it as StandardJavadocDocletOptions

                    if (JavaVersion.current().isJava9Compatible()) {
                        opt.addBooleanOption("html5", true)
                        opt.addStringOption("-release", "8")
                    }

                    if (JavaVersion.current().isJava11Compatible()) {
                        opt.addBooleanOption("-no-module-directories", true)
                    }
                }
            }
        }
    }

    build {
        dependsOn { clean }
        dependsOn { jar }
        dependsOn { javadocJar }
        dependsOn { sourcesJar }
        dependsOn { shadowJar }
    }
}

subprojects {
    apply plugin: 'java'

    ext {
        includeInParent = true
    }

    version = project.version

    compileJava {
        source = sourceSets.main.allJava
        classpath = sourceSets.main.compileClasspath
    }

    javadoc {
        destinationDir = file("$rootDir/docs/$project.name/")

        configureJavadoc(it)
    }

    jar {
        destinationDirectory = file("$rootDir/build/libs/")
        configureJar(it)
    }

    shadowJar {
        destinationDirectory = file("$rootDir/build/libs/")
        configureJar(it, 'withDependencies')
    }

    task javadocJar(type: Jar) {
        group = 'build'
        dependsOn javadoc
        from javadoc.destinationDir
        configureJar(it, 'javadoc')
        destinationDirectory = file("$rootDir/build/libs/")
    }

    task sourcesJar(type: Jar) {
        group = 'build'
        dependsOn classes
        from sourceSets.main.allSource
        configureJar(it, 'sources')
        destinationDirectory = file("$rootDir/build/libs/")
    }

    afterEvaluate {
        if(project.includeInParent) {
            rootProject.dependencies.compile project
        }
    }

    javadoc {
        exclude('dev/mlnr/blh/core/internal')
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = 'BotListHandler-' + project.name

                from components.java
                artifact javadocJar
                artifact sourcesJar

                pom {
                    name = 'BotListHandler'
                    description = 'a library which handles discord bot lists stats updating for you'
                    url = 'https://github.com/caneleex/BotListHandler'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'caneleex'
                            name = 'Sebo Moln√°r'
                            email = 'dev@mlnr.dev'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/caneleex/BotListHandler'
                        developerConnection = 'scm:git:ssh:git@github.com:caneleex/BotListHandler'
                        url = 'https://github.com/caneleex/BotListHandler'
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}

configurations {
    compile {
        description = 'compile'
        transitive = true
    }
}

shadowJar{
    configureJar(it)

    from { subprojects*.jar }
    destinationDirectory = file("$rootDir/build/libs/")
}

task javadocJar(type: Jar, dependsOn: javadoc){
    configureJar(it, 'javadoc')

    from { javadoc.destinationDir }
    destinationDirectory = file("$rootDir/build/libs/")
}

task sourcesJar(type: Jar, dependsOn: classes){
    group = 'build'
    dependsOn { rootProject.getTasksByName('classes', true) }

    configureJar(it, 'sources')

    from { subprojects*.sourceSets.main.allSource }
    destinationDirectory = file("$rootDir/build/libs/")
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = System.getenv("sonatype_username")
            password = System.getenv("sonatype_password")
        }
    }
}

compileJava.options.encoding = 'UTF-8'